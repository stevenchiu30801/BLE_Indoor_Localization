<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxac.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxac.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Thu Dec 07 09:52:13 2017
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
nrf_log_backend_serial_std_handler &rArr; serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[11]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[22]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[25]">ble_evt_dispatch</a> from main_2.o(i.ble_evt_dispatch) referenced from main_2.o(i.ble_stack_init)
 <LI><a href="#[2c]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[2d]">button_event_handler</a> from main_2.o(i.button_event_handler) referenced from main_2.o(.data)
 <LI><a href="#[26]">db_disc_handler</a> from main_2.o(i.db_disc_handler) referenced from main_2.o(i.main)
 <LI><a href="#[24]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[23]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[27]">lbs_c_evt_handler</a> from main_2.o(i.lbs_c_evt_handler) referenced from main_2.o(i.main)
 <LI><a href="#[1f]">main</a> from main_2.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[28]">nrf_log_backend_serial_hexdump_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
 <LI><a href="#[2a]">nrf_log_backend_serial_std_handler</a> from nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
 <LI><a href="#[2b]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[29]">uart_event_handler</a> from nrf_log_backend_serial.o(i.uart_event_handler) referenced from nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[e5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[c7]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_on_db_disc_evt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_handles_assign
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_report
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[d2]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_report
</UL>

<P><STRONG><a name="[52]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[34]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ed]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ee]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[49]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[19]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__0snprintf$8</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ef]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[c9]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[9e]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[f0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[58]"></a>app_button_disable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_button.o(i.app_button_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = app_button_disable &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[5b]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
</UL>

<P><STRONG><a name="[5d]"></a>app_button_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>app_error_fault_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[4e]"></a>app_error_handler_bare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>app_timer_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[66]"></a>app_timer_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[5a]"></a>app_timer_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_disable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[6a]"></a>app_util_critical_region_enter</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[6c]"></a>app_util_critical_region_exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[78]"></a>ble_conn_state_n_centrals</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_n_centrals))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_n_centrals &rArr; sdk_mapped_flags_n_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_n_flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[7a]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 238 bytes, Stack size 72 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[80]"></a>ble_db_discovery_evt_register</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_evt_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_db_discovery_evt_register &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_init
</UL>

<P><STRONG><a name="[af]"></a>ble_db_discovery_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_db_discovery.o(i.ble_db_discovery_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>ble_db_discovery_on_ble_evt</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ble_db_discovery.o(i.ble_db_discovery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ble_db_discovery_on_ble_evt &rArr; on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[86]"></a>ble_db_discovery_start</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_db_discovery.o(i.ble_db_discovery_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_db_discovery_start &rArr; nrf_log_frontend_std_2 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[89]"></a>ble_lbs_c_button_notif_enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_lbs_c.o(i.ble_lbs_c_button_notif_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_lbs_c_button_notif_enable &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
</UL>

<P><STRONG><a name="[8b]"></a>ble_lbs_c_handles_assign</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ble_lbs_c.o(i.ble_lbs_c_handles_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_lbs_c_handles_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[8c]"></a>ble_lbs_c_init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ble_lbs_c.o(i.ble_lbs_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_lbs_c_init &rArr; ble_db_discovery_evt_register &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>ble_lbs_c_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ble_lbs_c.o(i.ble_lbs_c_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_lbs_c_on_ble_evt &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[8d]"></a>ble_lbs_led_status_send</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_lbs_c.o(i.ble_lbs_led_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_lbs_led_status_send &rArr; tx_buffer_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
</UL>

<P><STRONG><a name="[8e]"></a>ble_lbs_on_db_disc_evt</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ble_lbs_c.o(i.ble_lbs_on_db_disc_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_lbs_on_db_disc_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_disc_handler
</UL>

<P><STRONG><a name="[a1]"></a>bsp_board_led_invert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[94]"></a>bsp_board_led_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
</UL>

<P><STRONG><a name="[96]"></a>bsp_board_led_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
</UL>

<P><STRONG><a name="[9f]"></a>bsp_board_led_state_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[97]"></a>bsp_board_leds_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_init &rArr; bsp_board_leds_off &rArr; bsp_board_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[9a]"></a>bsp_board_leds_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[9b]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[9c]"></a>bsp_indication_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
</UL>

<P><STRONG><a name="[cb]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[4f]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main_2.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; ble_stack_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b1]"></a>nrf_drv_clock_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[b4]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[ab]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[b2]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[59]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_disable
</UL>

<P><STRONG><a name="[5c]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[60]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[a8]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[5f]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[5e]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[ba]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[bb]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_uart_tx &rArr; nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[bc]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_uart_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>

<P><STRONG><a name="[ce]"></a>nrf_log_backend_hexdump_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[c3]"></a>nrf_log_backend_init</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_blocking_backend_set
</UL>

<P><STRONG><a name="[cf]"></a>nrf_log_backend_std_handler_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[64]"></a>nrf_log_blocking_backend_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_blocking_backend_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[65]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_log_frontend_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[cc]"></a>nrf_log_frontend_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_frontend_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_handlers_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[63]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_log_frontend_std_0 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_coords
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[a3]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_event_handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
</UL>

<P><STRONG><a name="[77]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_log_frontend_std_2 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_c_evt_handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_disc_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[73]"></a>nrf_log_frontend_std_6</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_log_frontend_std_6 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_coords
</UL>

<P><STRONG><a name="[cd]"></a>nrf_log_handlers_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_handlers_set))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
</UL>

<P><STRONG><a name="[ae]"></a>nrf_log_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_log_init &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_std_handler_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_hexdump_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>

<P><STRONG><a name="[7e]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[7b]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sdk_mapped_flags_key_list_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[79]"></a>sdk_mapped_flags_n_flags_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_n_flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_n_flags_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_n_centrals
</UL>

<P><STRONG><a name="[7f]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[93]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[92]"></a>softdevice_enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = softdevice_enable &rArr; nrf_log_frontend_std_1 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[91]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[2b]"></a>softdevice_fault_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[90]"></a>softdevice_handler_init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[b3]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d1]"></a>adv_report_parse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main_2.o(i.adv_report_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_report_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_report
</UL>

<P><STRONG><a name="[72]"></a>assign_coords</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, main_2.o(i.assign_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = assign_coords &rArr; nrf_log_frontend_std_6 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[74]"></a>assign_rssi</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main_2.o(i.assign_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = assign_rssi &rArr; nrf_log_frontend_std_2 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_report
</UL>

<P><STRONG><a name="[25]"></a>ble_evt_dispatch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main_2.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ble_evt_dispatch &rArr; ble_db_discovery_on_ble_evt &rArr; on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_on_ble_evt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_2.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[8f]"></a>ble_stack_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, main_2.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_stack_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>button_event_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main_2.o(i.button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = button_event_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_led_status_send
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_2.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>db_disc_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main_2.o(i.db_disc_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = db_disc_handler &rArr; nrf_log_frontend_std_2 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_on_db_disc_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_2.o(i.main)
</UL>
<P><STRONG><a name="[27]"></a>lbs_c_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main_2.o(i.lbs_c_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lbs_c_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_button_notif_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_2.o(i.main)
</UL>
<P><STRONG><a name="[d0]"></a>on_adv_report</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, main_2.o(i.on_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = on_adv_report &rArr; assign_rssi &rArr; nrf_log_frontend_std_2 &rArr; buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_rssi
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_report_parse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[87]"></a>on_ble_evt</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, main_2.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = on_ble_evt &rArr; scan_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_handles_assign
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_n_centrals
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_report
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assign_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[b0]"></a>scan_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main_2.o(i.scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = scan_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[98]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[95]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[2c]"></a>bsp_button_event_handler</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>bsp_led_indication</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_led_indication &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[d3]"></a>characteristics_discover</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_db_discovery.o(i.characteristics_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[a6]"></a>descriptors_discover</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ble_db_discovery.o(i.descriptors_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = descriptors_discover &rArr; is_desc_discovery_reqd
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[a9]"></a>discovery_complete_evt_trigger</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ble_db_discovery.o(i.discovery_complete_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = discovery_complete_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[aa]"></a>discovery_error_evt_trigger</STRONG> (Thumb, 46 bytes, Stack size 120 bytes, ble_db_discovery.o(i.discovery_error_evt_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[a7]"></a>is_desc_discovery_reqd</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ble_db_discovery.o(i.is_desc_discovery_reqd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_desc_discovery_reqd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>

<P><STRONG><a name="[85]"></a>on_characteristic_discovery_rsp</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, ble_db_discovery.o(i.on_characteristic_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = on_characteristic_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[83]"></a>on_descriptor_discovery_rsp</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ble_db_discovery.o(i.on_descriptor_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = on_descriptor_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;descriptors_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[84]"></a>on_primary_srv_discovery_rsp</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_primary_srv_discovery_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = on_primary_srv_discovery_rsp &rArr; on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_srv_disc_completion
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristics_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_on_ble_evt
</UL>

<P><STRONG><a name="[d4]"></a>on_srv_disc_completion</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ble_db_discovery.o(i.on_srv_disc_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = on_srv_disc_completion &rArr; discovery_error_evt_trigger &rArr; registered_handler_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_primary_srv_discovery_rsp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_descriptor_discovery_rsp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_characteristic_discovery_rsp
</UL>

<P><STRONG><a name="[81]"></a>registered_handler_get</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, ble_db_discovery.o(i.registered_handler_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = registered_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_db_discovery_evt_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_error_evt_trigger
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discovery_complete_evt_trigger
</UL>

<P><STRONG><a name="[8a]"></a>tx_buffer_process</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ble_lbs_c.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_buffer_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_led_status_send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_on_ble_evt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_lbs_c_button_notif_enable
</UL>

<P><STRONG><a name="[45]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>nrf_clock_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[b7]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[42]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[43]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[b6]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[6f]"></a>apply_config</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[bd]"></a>nrf_drv_uart_tx_for_uart</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_uart_tx_for_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[c2]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[c1]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[71]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[70]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[bf]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[dc]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[dd]"></a>rx_byte</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rx_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[de]"></a>rx_done_event</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[be]"></a>tx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_for_uart
</UL>

<P><STRONG><a name="[df]"></a>tx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[51]"></a>uart_irq_handler</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[23]"></a>gpiote_event_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpiote_event_handler &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[68]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[a4]"></a>compare_reg_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[da]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[db]"></a>list_deletions_handler</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[ac]"></a>list_insertions_handler</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[a5]"></a>nrf_delay_us</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[67]"></a>rtc1_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[4d]"></a>timer_list_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[ad]"></a>timer_list_insert</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[6e]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[46]"></a>timer_timeouts_check</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_blocking_backend_set &rArr; nrf_log_backend_init &rArr; nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[d7]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_n_flags_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[ca]"></a>buf_len_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.buf_len_update))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
</UL>

<P><STRONG><a name="[28]"></a>nrf_log_backend_serial_hexdump_handler</STRONG> (Thumb, 324 bytes, Stack size 296 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_hexdump_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_log_backend_serial_hexdump_handler &rArr; serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_hexdump_handler_get)
</UL>
<P><STRONG><a name="[2a]"></a>nrf_log_backend_serial_std_handler</STRONG> (Thumb, 276 bytes, Stack size 320 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_std_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_log_backend_serial_std_handler &rArr; serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_is_busy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_std_handler_get)
</UL>
<P><STRONG><a name="[c4]"></a>serial_is_busy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_log_backend_serial.o(i.serial_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[c8]"></a>serial_tx</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, nrf_log_backend_serial.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[c5]"></a>timestamp_process</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_log_backend_serial.o(i.timestamp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timestamp_process &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_len_update
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_std_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_hexdump_handler
</UL>

<P><STRONG><a name="[29]"></a>uart_event_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_log_backend_serial.o(i.uart_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_serial.o(i.nrf_log_backend_init)
</UL>
<P><STRONG><a name="[a2]"></a>buf_prealloc</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = buf_prealloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_6
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[48]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[4a]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[4c]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[4b]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[d6]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[d8]"></a>ram_end_address_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
</UL>

<P><STRONG><a name="[d5]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[50]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[55]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
</UL>

<P><STRONG><a name="[57]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
